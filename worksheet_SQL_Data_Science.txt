Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =    10000  	SELECT COUNT(*) AS 'total' FROM attribute
ii. Business table =    10000 	SELECT COUNT(*) AS 'total' FROM business
iii. Category table =   10000 	SELECT COUNT(*) AS 'total' FROM category
iv. Checkin table =     10000	SELECT COUNT(*) AS 'total' FROM checkin
v. elite_years table =  10000	SELECT COUNT(*) AS 'total' FROM elite_years
vi. friend table =      10000	SELECT COUNT(*) AS 'total' FROM friend
vii. hours table =      10000	SELECT COUNT(*) AS 'total' FROM hours
viii. photo table =     10000 	SELECT COUNT(*) AS 'total' FROM photo
ix. review table =      10000	SELECT COUNT(*) AS 'total' FROM review
x. tip table =          10000 	SELECT COUNT(*) AS 'total' FROM tip
xi. user table =        10000	SELECT COUNT(*) AS 'total' FROM user
	
---------------------------------- SQL ----------------------------------

i. 		SELECT COUNT(*) AS 'total' FROM attribute
ii. 	SELECT COUNT(*) AS 'total' FROM business
iii.	SELECT COUNT(*) AS 'total' FROM category
iv. 	SELECT COUNT(*) AS 'total' FROM checkin
v.  	SELECT COUNT(*) AS 'total' FROM elite_years
vi. 	SELECT COUNT(*) AS 'total' FROM friend
vii.	SELECT COUNT(*) AS 'total' FROM hours
viii. 	SELECT COUNT(*) AS 'total' FROM photo
ix.		SELECT COUNT(*) AS 'total' FROM review
x. 		SELECT COUNT(*) AS 'total' FROM tip
xi. 	SELECT COUNT(*) AS 'total' FROM user



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 	id: 10000				 		
ii. Hours =		business_id: 1562 		
iii. Category =	business_Id: 2643 		
iv. Attribute =	business_Id: 1115 		
v. Review =		id 		   :10000 | business_id: 8090 | user_id: 9581		
vi. Checkin = 	business_id: 493 		
vii Photo	=	id		   : 10000 | business_id : 6493 
viii. Tip =	 	user_id    : 537  |  business_id: 3979
ix. User = 		id 		   : 10000		
x. Friend = 	user_id	   : 11 		
xi. Elite_years = user_id  : 2780 		
Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =    10000  	SELECT COUNT(*) AS 'total' FROM attribute
ii. Business table =    10000 	SELECT COUNT(*) AS 'total' FROM business
iii. Category table =   10000 	SELECT COUNT(*) AS 'total' FROM category
iv. Checkin table =     10000	SELECT COUNT(*) AS 'total' FROM checkin
v. elite_years table =  10000	SELECT COUNT(*) AS 'total' FROM elite_years
vi. friend table =      10000	SELECT COUNT(*) AS 'total' FROM friend
vii. hours table =      10000	SELECT COUNT(*) AS 'total' FROM hours
viii. photo table =     10000 	SELECT COUNT(*) AS 'total' FROM photo
ix. review table =      10000	SELECT COUNT(*) AS 'total' FROM review
x. tip table =          10000 	SELECT COUNT(*) AS 'total' FROM tip
xi. user table =        10000	SELECT COUNT(*) AS 'total' FROM user
	
---------------------------------- SQL ----------------------------------

i. 		SELECT COUNT(*) AS 'total' FROM attribute
ii. 	SELECT COUNT(*) AS 'total' FROM business
iii.	SELECT COUNT(*) AS 'total' FROM category
iv. 	SELECT COUNT(*) AS 'total' FROM checkin
v.  	SELECT COUNT(*) AS 'total' FROM elite_years
vi. 	SELECT COUNT(*) AS 'total' FROM friend
vii.	SELECT COUNT(*) AS 'total' FROM hours
viii. 	SELECT COUNT(*) AS 'total' FROM photo
ix.		SELECT COUNT(*) AS 'total' FROM review
x. 		SELECT COUNT(*) AS 'total' FROM tip
xi. 	SELECT COUNT(*) AS 'total' FROM user



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 	id: 10000				 		
ii. Hours =		business_id: 1562 		
iii. Category =	business_Id: 2643 		
iv. Attribute =	business_Id: 1115 		
v. Review =		id 		   :10000 | business_id: 8090 | user_id: 9581		
vi. Checkin = 	business_id: 493 		
vii Photo	=	id		   : 10000 | business_id : 6493 
viii. Tip =	 	user_id    : 537  |  business_id: 3979
ix. User = 		id 		   : 10000		
x. Friend = 	user_id	   : 11 		
xi. Elite_years = user_id  : 2780 		

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

---------------------------------- SQL ----------------------------------
i. 		SELECT COUNT(DISTINCT(id)) AS 'id' FROM user 		
ii.		SELECT COUNT(DISTINCT(business_id)) AS 'business_id' FROM hours
iii. 	SELECT COUNT(DISTINCT(business_Id)) AS 'business_id' FROM category
iv. 	SELECT COUNT(DISTINCT(business_Id)) AS 'business_id' FROM attribute
v. 		SELECT COUNT(DISTINCT(id)) AS 'primary key', COUNT(DISTINCT(business_Id)) AS 'foreign key business', COUNT(DISTINCT(user_Id)) AS 'foreign key users' FROM review 
vi. 	SELECT COUNT(DISTINCT(business_id)) AS 'business_id' FROM checkin
vii.	SELECT COUNT(DISTINCT(id)) AS 'id', COUNT(DISTINCT(id)) AS 'business_id' FROM Photo
viii. 	SELECT COUNT(DISTINCT(user_id)) AS 'user_id', COUNT(DISTINCT(business_id)) AS 'business_id' FROM Tip
ix. 	SELECT COUNT(DISTINCT(id)) AS 'id' FROM User
x. 		SELECT COUNT(DISTINCT(user_id)) AS 'user_id' FROM Friend
xi. 	SELECT COUNT(DISTINCT(user_id)) AS 'user_id' FROM Elite_years

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	no
	
	SQL code used to arrive at answer:
	
	SELECT COUNT(*) FROM User
	WHERE
	id   IS NULL OR
	name IS NULL OR
	review_count IS NULL OR
	yelping_since IS NULL OR
	useful IS NULL OR      
	funny IS NULL OR
	cool IS NULL OR
	fans IS NULL OR
	average_stars IS NULL OR
	compliment_hot IS NULL OR
	compliment_more IS NULL OR
	compliment_profile IS NULL OR
	compliment_cute  IS NULL OR
	compliment_list IS NULL OR
	compliment_note IS NULL OR
	compliment_plain IS NULL OR
	compliment_cool IS NULL OR
	compliment_funny IS NULL OR
	compliment_writer IS NULL OR
	compliment_photos IS NULL

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000 		avg:24.2995

---------------------------------- SQL ----------------------------------
i.	SELECT MIN(stars), MAX(stars), AVG(stars) FROM Review
ii.	SELECT MIN(stars), MAX(stars), AVG(stars) FROM Business
iii.SELECT MIN(likes), MAX(likes), AVG(likes) FROM Tip
iv.	SELECT MIN(count), MAX(count), AVG(count) FROM Checkin
v.	SELECT MIN(Review_count), MAX(Review_count), AVG(Review_count) FROM User

5. List the cities with the most reviews in descending order:

	SELECT city, SUM(review_count) AS 'TOTAL'
	FROM business GROUP BY city
	ORDER BY TOTAL DESC
	
	Copy and Paste the Result Below:
	+-----------------+-------+
| city            | TOTAL |
+-----------------+-------+
| Las Vegas       | 82854 |
| Phoenix         | 34503 |
| Toronto         | 24113 |
| Scottsdale      | 20614 |
| Charlotte       | 12523 |
| Henderson       | 10871 |
| Tempe           | 10504 |
| Pittsburgh      |  9798 |
| Montréal        |  9448 |
| Chandler        |  8112 |
| Mesa            |  6875 |
| Gilbert         |  6380 |
| Cleveland       |  5593 |
| Madison         |  5265 |
| Glendale        |  4406 |
| Mississauga     |  3814 |
| Edinburgh       |  2792 |
| Peoria          |  2624 |
| North Las Vegas |  2438 |
| Markham         |  2352 |
| Champaign       |  2029 |
| Stuttgart       |  1849 |
| Surprise        |  1520 |
| Lakewood        |  1465 |
| Goodyear        |  1155 |
+-----------------+-------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, review_count AS 'count'FROM business WHERE city = 'Avon' GROUP BY stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     3 |
|   3.5 |    50 |
|   4.0 |    17 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT stars, review_count AS 'count'FROM business WHERE city = 'Beachwood' GROUP BY stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |     3 |
|   3.5 |     3 |
|   4.0 |    69 |
|   4.5 |     3 |
|   5.0 |     4 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name, review_count FROM user ORDER BY review_count DESC LIMIT 3

	Copy and Paste the Result Below:
	
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
	

8. Does posing more reviews correlate with more fans?


	SELECT name, fans, review_count FROM user ORDER BY review_count DESC

	Please explain your findings and interpretation of the results:
	
	Not necessarily correlated. Sara, Yuri,  eric and edi have the most review, but they have  low number fans 

+-----------+------+--------------+
| name      | fans | review_count |
+-----------+------+--------------+
| Gerald    |  253 |         2000 |
| Sara      |   50 |         1629 |
| Yuri      |   76 |         1339 |
| .Hon      |  101 |         1246 |
| William   |  126 |         1215 |
| Harald    |  311 |         1153 |
| eric      |   16 |         1116 |
| Roanna    |  104 |         1039 |
| Mimi      |  497 |          968 |
| Christine |  173 |          930 |
| Ed        |   38 |          904 |
| Nicole    |   43 |          864 |
| Fran      |  124 |          862 |
| Mark      |  115 |          861 |
| Christina |   85 |          842 |
| Dominic   |   37 |          836 |
| Lissa     |  120 |          834 |
| Lisa      |  159 |          813 |
| Alison    |   61 |          775 |
| Sui       |   78 |          754 |
| Tim       |   35 |          702 |
| L         |   10 |          696 |
| Angela    |  101 |          694 |
| Crissy    |   25 |          676 |
| Lyn       |   45 |          675 |
+-----------+------+--------------+


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	The answer is yes, because there are 1780 reviews with the word "love" and 232 reviews with the word "hate". 
	
	SQL code used to arrive at answer:
	
	SELECT COUNT(*) AS 'TOTAL',
	CASE
	WHEN TEXT LIKE '%love%' THEN 'love'
	WHEN TEXT LIKE '%hate%' THEN 'hate'
	ELSE 'none'
	END AS 'fell'
	FROM review GROUP BY fell

+-------+------+
| TOTAL | fell |
+-------+------+
|   178 | hate |
|  1780 | love |
|  8042 | none |
+-------+------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans FROM user ORDER BY fans DESC

	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
| Mark      |  115 |
| Tiffany   |  111 |
| bernice   |  105 |
| Roanna    |  104 |
| Angela    |  101 |
| .Hon      |  101 |
| Ben       |   96 |
| Linda     |   89 |
| Christina |   85 |
| Jessica   |   84 |
| Greg      |   81 |
| Nieves    |   80 |
| Sui       |   78 |
| Yuri      |   76 |
| Nicole    |   73 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I pick Las vegas city and shopping as category

The business that have 2-3 stars are grouping in the group 1 and The that have 4-5 stars are grouping in the group 2

i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, group 1 businesses close later than group 2. But all business open 8:00

ii. Do the two groups you chose to analyze have a different number of reviews?
yes, the group(1) thouse have between 2 and 3 stars all have less reviews than the group (2) have between 4 and 5 reviews. also the group 2 there are business that have 5 stars with less  reviews than business that have 4 stars

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

only that group one businesses close at the same time on weekends

SQL code used for analysis:

SELECT *,
CASE
    WHEN stars >= 2.0 AND stars <=3.0 THEN 1
    WHEN stars >= 4.0 AND stars <=5.0 THEN 2
END AS 'group_start'
FROM (SELECT b.state, b.name, b.city, b.stars, b.review_count, c.category, 
SUBSTR(h.hours, 0, 3) AS 'DAY', h.hours
FROM ((business b INNER JOIN category c on b.id = c.business_id) 
INNER JOIN hours h ON b.id = h.business_id) 
WHERE b.city = 'Las Vegas' AND c.category = 'Shopping') WHERE
group_start = 1 OR group_start = 2
ORDER BY stars  DESC

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

There are more businesses open than closed
         
ii. Difference 2:

open businesseshave more reviews and stars than closed businesses

SQL code used for analysis:

SELECT COUNT(*) AS 'TOTAL', SUM(stars) as 'SUM OF STAR',
SUM(review_count) AS 'SUM OF REVIEW', is_open FROM business GROUP BY is_open

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

783 / 5000
Resultados de traducción
The factor that influences the number of fans in users

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I need quantitative variables, to analyze whether a large number influences the average number of stars. For this purpose, look at the number of fans, the number of reviews, the type of review: useful, funny and cool. I discovered that the only variable that induces a probable relationship between the popularity of each user is that the reviews are useful.
                           
                  
iii. Output of your finished dataset:
 +------+--------------+------------+--------+-------+------+---------------+
| fans | review_count | name       | useful | funny | cool | average_stars |
+------+--------------+------------+--------+-------+------+---------------+
|   80 |          178 | Nieves     |   1091 |   774 |  940 |          3.64 |
|   49 |          196 | Dottsy     |   2654 |   989 | 2989 |          3.42 |
|   41 |          503 | Dixie      |     21 |    32 |   23 |          3.19 |
|   38 |          904 | Ed         |    141 |    88 |   85 |           3.6 |
|   32 |          449 | Pinky      |     43 |    15 |   14 |          3.75 |
|   29 |          279 | Annie      |   1402 |  1111 | 1212 |           4.0 |
|   27 |           86 | Christina  |     16 |     5 |    3 |          4.69 |
|   27 |           86 | Christina  |     16 |     5 |    3 |          4.69 |
|   25 |          676 | Crissy     |      4 |     1 |    1 |          3.31 |
|   18 |          240 | Kyle       |    129 |    33 |   22 |          3.82 |
|   16 |          257 | AJA        |     75 |    16 |   11 |          3.86 |
|   15 |          259 | Jean       |    748 |    22 |   38 |          3.91 |
|   14 |          345 | Dave       |     16 |     6 |    6 |          3.69 |
|   12 |          418 | Mark       |     38 |    49 |   16 |           4.0 |
|   11 |          564 | Danny      |     38 |    10 |   12 |          3.46 |
|   10 |          174 | Andrea     |     72 |     2 |   38 |          3.87 |
|   10 |           90 | Christophe |    371 |    39 |   21 |          4.01 |
|    6 |           44 | Alaina     |    154 |    16 |    2 |           4.0 |
|    6 |          109 | Jade       |     21 |    13 |    4 |          3.36 |
|    6 |          122 | Char       |      2 |     3 |    2 |          3.82 |
|    5 |           10 | James      |      6 |     0 |    3 |           4.2 |
|    5 |           92 | LA         |    199 |    15 |    2 |          3.79 |
|    4 |          198 | W          |   6974 |  6033 | 4746 |          3.88 |
|    4 |          167 | Isabelle   |      4 |     7 |    1 |          3.83 |
|    3 |           71 | Sanaz      |     17 |     5 |    6 |          3.77 |
+------+--------------+------------+--------+-------+------+---------------+        
         
iv. Provide the SQL code you used to create your final dataset:

SELECT u.fans, u.review_count, u.name, u.useful, u.funny, u.cool, u.average_stars
FROM review r INNER JOIN user u
ON r.user_id = u.id ORDER BY u.fans DESC
